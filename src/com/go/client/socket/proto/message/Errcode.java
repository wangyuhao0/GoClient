// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgProto/errcode.proto

package com.go.client.socket.proto.message;

public final class Errcode {
  private Errcode() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code msg.ErrCode}
   */
  public enum ErrCode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>OK = 0;</code>
     */
    OK(0),
    /**
     * <pre>
     *内部错误
     * </pre>
     *
     * <code>InterNalError = 1;</code>
     */
    InterNalError(1),
    /**
     * <pre>
     *Token验证错误
     * </pre>
     *
     * <code>TokenError = 2;</code>
     */
    TokenError(2),
    /**
     * <pre>
     *超过最大连接数
     * </pre>
     *
     * <code>ConnExceeded = 3;</code>
     */
    ConnExceeded(3),
    /**
     * <pre>
     *已经是登陆请求,不允许重复请求
     * </pre>
     *
     * <code>RepeatLoginReq = 4;</code>
     */
    RepeatLoginReq(4),
    /**
     * <pre>
     *平台类型错误
     * </pre>
     *
     * <code>PlatTypeError = 5;</code>
     */
    PlatTypeError(5),
    /**
     * <pre>
     *平台Id错误
     * </pre>
     *
     * <code>PlatIdError = 6;</code>
     */
    PlatIdError(6),
    /**
     * <pre>
     *未登录到playerSevice 直接创建room
     * </pre>
     *
     * <code>NotLoginPlayerService = 7;</code>
     */
    NotLoginPlayerService(7),
    /**
     * <pre>
     *房间号不存在
     * </pre>
     *
     * <code>RoomIdNotExist = 8;</code>
     */
    RoomIdNotExist(8),
    /**
     * <pre>
     *重新匹配
     * </pre>
     *
     * <code>NeedReMatch = 9;</code>
     */
    NeedReMatch(9),
    /**
     * <pre>
     * 卓子号不存在
     * </pre>
     *
     * <code>TableIdNotExist = 10;</code>
     */
    TableIdNotExist(10),
    /**
     * <pre>
     *不是房主
     * </pre>
     *
     * <code>NotOwner = 11;</code>
     */
    NotOwner(11),
    /**
     * <pre>
     *房间满了
     * </pre>
     *
     * <code>TableIsEnough = 12;</code>
     */
    TableIsEnough(12),
    /**
     * <pre>
     *有用户拒绝了
     * </pre>
     *
     * <code>HaveClientRefuse = 13;</code>
     */
    HaveClientRefuse(13),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>OK = 0;</code>
     */
    public static final int OK_VALUE = 0;
    /**
     * <pre>
     *内部错误
     * </pre>
     *
     * <code>InterNalError = 1;</code>
     */
    public static final int InterNalError_VALUE = 1;
    /**
     * <pre>
     *Token验证错误
     * </pre>
     *
     * <code>TokenError = 2;</code>
     */
    public static final int TokenError_VALUE = 2;
    /**
     * <pre>
     *超过最大连接数
     * </pre>
     *
     * <code>ConnExceeded = 3;</code>
     */
    public static final int ConnExceeded_VALUE = 3;
    /**
     * <pre>
     *已经是登陆请求,不允许重复请求
     * </pre>
     *
     * <code>RepeatLoginReq = 4;</code>
     */
    public static final int RepeatLoginReq_VALUE = 4;
    /**
     * <pre>
     *平台类型错误
     * </pre>
     *
     * <code>PlatTypeError = 5;</code>
     */
    public static final int PlatTypeError_VALUE = 5;
    /**
     * <pre>
     *平台Id错误
     * </pre>
     *
     * <code>PlatIdError = 6;</code>
     */
    public static final int PlatIdError_VALUE = 6;
    /**
     * <pre>
     *未登录到playerSevice 直接创建room
     * </pre>
     *
     * <code>NotLoginPlayerService = 7;</code>
     */
    public static final int NotLoginPlayerService_VALUE = 7;
    /**
     * <pre>
     *房间号不存在
     * </pre>
     *
     * <code>RoomIdNotExist = 8;</code>
     */
    public static final int RoomIdNotExist_VALUE = 8;
    /**
     * <pre>
     *重新匹配
     * </pre>
     *
     * <code>NeedReMatch = 9;</code>
     */
    public static final int NeedReMatch_VALUE = 9;
    /**
     * <pre>
     * 卓子号不存在
     * </pre>
     *
     * <code>TableIdNotExist = 10;</code>
     */
    public static final int TableIdNotExist_VALUE = 10;
    /**
     * <pre>
     *不是房主
     * </pre>
     *
     * <code>NotOwner = 11;</code>
     */
    public static final int NotOwner_VALUE = 11;
    /**
     * <pre>
     *房间满了
     * </pre>
     *
     * <code>TableIsEnough = 12;</code>
     */
    public static final int TableIsEnough_VALUE = 12;
    /**
     * <pre>
     *有用户拒绝了
     * </pre>
     *
     * <code>HaveClientRefuse = 13;</code>
     */
    public static final int HaveClientRefuse_VALUE = 13;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ErrCode valueOf(int value) {
      return forNumber(value);
    }

    public static ErrCode forNumber(int value) {
      switch (value) {
        case 0: return OK;
        case 1: return InterNalError;
        case 2: return TokenError;
        case 3: return ConnExceeded;
        case 4: return RepeatLoginReq;
        case 5: return PlatTypeError;
        case 6: return PlatIdError;
        case 7: return NotLoginPlayerService;
        case 8: return RoomIdNotExist;
        case 9: return NeedReMatch;
        case 10: return TableIdNotExist;
        case 11: return NotOwner;
        case 12: return TableIsEnough;
        case 13: return HaveClientRefuse;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ErrCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ErrCode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ErrCode>() {
            public ErrCode findValueByNumber(int number) {
              return ErrCode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return Errcode.getDescriptor().getEnumTypes().get(0);
    }

    private static final ErrCode[] VALUES = values();

    public static ErrCode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ErrCode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:msg.ErrCode)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026msgProto/errcode.proto\022\003msg*\212\002\n\007ErrCod" +
      "e\022\006\n\002OK\020\000\022\021\n\rInterNalError\020\001\022\016\n\nTokenErr" +
      "or\020\002\022\020\n\014ConnExceeded\020\003\022\022\n\016RepeatLoginReq" +
      "\020\004\022\021\n\rPlatTypeError\020\005\022\017\n\013PlatIdError\020\006\022\031" +
      "\n\025NotLoginPlayerService\020\007\022\022\n\016RoomIdNotEx" +
      "ist\020\010\022\017\n\013NeedReMatch\020\t\022\023\n\017TableIdNotExis" +
      "t\020\n\022\014\n\010NotOwner\020\013\022\021\n\rTableIsEnough\020\014\022\024\n\020" +
      "HaveClientRefuse\020\rB\007Z\005.;msgb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
